variables:
  - group: Github-credentials
  - group: npm-config-artifactory
  - group: jira-e1platform
  - name: pluginName
    value: "kibana-prometheus-exporter"  # name of the plugin
  - name: kibanaBaseVersion # kibana version
    value: "8.12"
  - name: pluginPatchVersion # patch version of the plugin
    value: ""
  - name: pluginVersion # version of the plugin
    value: "" # "$(kibanaBaseVersion).$(pluginPatchVersion)"
  
name: "$(pluginName)"

resources:
  repositories:
    - repository: kibana
      type: github
      name: elastic/kibana
      endpoint: Germanedge
      ref: 'refs/heads/$(kibanaBaseVersion)'

pool:
  vmImage: "ubuntu-22.04"

steps:
- checkout: kibana
  fetchDepth: 0
  path: s
- checkout: self
  fetchDepth: 0
  path: s/plugins/$(pluginName)
  persistCredentials: true
- script: |
    cd plugins/$(pluginName)
    ls -la
    # Parse the Json file and get the values.
    plugin_version=$(cat kibana.json | jq -r '.example.value1')
    # split version to get kibana version and patch level
    IFS='.' read -a version_parts <<< "$plugin_version#"
    echo "##[debug] Found ${#version_parts[@]} parts in version"
    if [ ${#version_parts[@]} -ne 3 ]; then
      echo "##[error] Version must have 3 parts, found ${#version_parts[@]}"
      exit 1
    fi
    # Set the values as output variables.
    echo "##vso[task.setvariable variable=pluginVersion;isoutput=true]$plugin_version"
    echo "##vso[task.setvariable variable=kibanaBaseVersion;isoutput=true]${version_parts[0]}.${version_parts[1]}"
    echo "##vso[task.setvariable variable=pluginPatchVersion;isoutput=true]$version_parts[2]"
    cd ../..
  displayName: 'Get Version'
- task: UseNode@1
  inputs:
    version: '18.19.1'
  displayName: 'Install Node.js'
- script:  |
    if ! [ -f ".npmrc" ]; then
      echo registry=$npm_config_registry > .npmrc && 
      echo _auth=$npm_config_auth >> .npmrc &&
      echo always-auth=$npm_config_always_auth >> .npmrc &
      echo email=$npm_config_email >> .npmrc;
    fi
  displayName: 'Provide npm login'
- script: |
    npm install -g yarn
  displayName: 'Install yarn'
- script: |  
    set -e
    git config --global user.email "git@germanedge.com"
    git config --global user.name "Continuous Integration"  
  displayName: 'git config'
  name: set_git_config
- script: |
    set -e
    cd plugins/$(pluginName)
    service_version=$(jq -r ".version" service.json)
    if [[ "$service_version" == "$(pluginVersion)" ]]; 
    then
        echo "File service.json contains correct version. Exiting."
        exit 0            
    fi

    update_version () {
      filename=$1
      new_version=$2
      filename_tmp='$filename.tmp'
      echo "##[debug] setting version in $filename to $new_version"
      jq ".version = \"${new_version}\"" $filename > $filename_tmp
      mv $filename_tmp $filename
      git add $filename
    }

    echo "##[debug] setting version to $(plugin_version)"
    update_version service.json $(plugin_version)
    update_version package.json $(plugin_version)

    git commit -m "CI: Set build version to $(plugin_version) [+semver: skip]"
    # set variable to stop build
    echo "##vso[task.setvariable variable=breakBuild;isOutput=true]true"
    cd ../..
  displayName: Set build version
- script: |
    yarn kbn bootstrap
  displayName: 'Bootstrap kibana'
- script: |
    cd plugins/$(pluginName)
    yarn install
    yarn build
    cd ../..
  displayName: 'Build plugin'
- script: |
    git tag $(pluginVersion)
    git push
  displayName: 'git add release tag and push'
- task: GithubRelease@1
  inputs:
    githubConnection: Github EdgeOne
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    tagSource: 'userSpecifiedTag'
    tag: $(pluginVersion)
    releaseNotesSource: 'filePath'
    releaseNotesFilePath : 'CHANGELOG.md'
    assets: '$(PWD)/plugins/kibana-prometheus-exporter/build/*'
  displayName: 'Create GitHub Release'
