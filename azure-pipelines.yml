variables:
  - group: Github-credentials
  - group: npm-config-artifactory
  - group: jira-e1platform
  - name: pluginName
    value: "kibana-prometheus-exporter"  # name of the plugin
  - name: pluginBaseVersion
    value: "8.12"
  - name: pluginPatchVersion
    value: "2"  # version of the plugin
  
name: "$(pluginName)"

resources:
  repositories:
    - repository: kibana
      type: github
      name: elastic/kibana
      endpoint: Germanedge
      ref: 'refs/heads/$(pluginBaseVersion)'

pool:
  vmImage: "ubuntu-22.04"

steps:
- checkout: kibana
  fetchDepth: 0
  path: s
- checkout: self
  fetchDepth: 0
  path: s/plugins/$(pluginName)
  persistCredentials: true
- task: UseNode@1
  inputs:
    version: '18.19.1'
  displayName: 'Install Node.js'
- script:  |
    if ! [ -f ".npmrc" ]; then
      echo registry=$npm_config_registry > .npmrc && 
      echo _auth=$npm_config_auth >> .npmrc &&
      echo always-auth=$npm_config_always_auth >> .npmrc &
      echo email=$npm_config_email >> .npmrc;
    fi
  displayName: 'Provide npm login'
- script: |
    npm install -g yarn
  displayName: 'Install yarn'
- script: |
    yarn kbn bootstrap
  displayName: 'Bootstrap kibana'
- script: |
    cd plugins/$(pluginName)
    yarn install
    yarn build
  displayName: 'Build plugin'
#- script: |  
#    set -e
#    git config --global user.email "git@germanedge.com"
#    git config --global user.name "Continuous Integration"  
#  displayName: 'git config'
#  name: set_git_config
- script: |
    set -e
    plugin_version = $(pluginBaseVersion).$(pluginPatchVersion)
    service_version=$(jq -r ".version" service.json)
    if [[ "$service_version" == "$plugin_version" ]]; 
    then
        echo "File service.json contains correct version. Exiting."
        exit 0            
    fi

    update_version () {
      filename=$1
      new_version=$2
      filename_tmp='$filename.tmp'
      echo "##[debug] setting version in $filename to $new_version"
      jq ".version = \"${new_version}\"" $filename > $filename_tmp
      mv $filename_tmp $filename
      git add $filename
    }

    echo "##[debug] setting version to $plugin_version"
    update_version service.json $plugin_version

    git commit -m "CI: Set build version to  [+semver: skip]"
    # set variable to stop build
    echo "##vso[task.setvariable variable=breakBuild;isOutput=true]true"
  displayName: Set build version
- script: |
    kibana_release=$(jq -r ".version" package.json)
    git tag $kibana_release
    git push --tags
  displayName: 'git add release tag'
